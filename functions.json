{
  "functions": [
    {
      "filename": "abs.json",
      "name": "Abs",
      "tags": "",
      "description": "Retourne l’équivalent positif de votre valeur si elle est en négatif.",
      "previewShader": "color = vec3(step(uv.y,  abs((fract(uv.x + time) - 0.5) * 2.0) ));"
    },
    {
      "filename": "atan2.json",
      "name": "Atan2",
      "tags": "",
      "description": "Permet de facilement convertir un vecteur normalisé en angle.",
      "previewShader": "highp float angle = time;\r\nhighp vec2 rotUv = uv - vec2(0.5, 0.5);\r\nrotUv = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * rotUv;\r\n\r\nhighp float crossA = max(abs(rotUv.x + 0.5) - 0.25, abs(rotUv.y) - 0.02);"
    },
    {
      "filename": "cosine.json",
      "name": "Cos",
      "tags": "trigonometry circle",
      "description": "Parfait pour faire des oscillations douces. Permet aussi de convertir un angle en direction.",
      "previewShader": "color = vec3(step(uv.y, cos(uv.x * 3.1415 + time) * 0.5 + 0.5));"
    },
    {
      "filename": "distance.json",
      "name": "Distance",
      "tags": "",
      "description": "Permet de calculer la distance entre deux points (fonctionne en 1D aussi)",
      "previewShader": "highp float d = distance(uv.xy, vec2(0.5, 0.5));\r\nd += sin(d * 8.0 + time * 4.0) * 0.02;\r\nhighp float a = abs(d - 0.4) - 0.02;\r\nhighp float b = abs(d - 0.3) - 0.02;\r\nhighp float c = abs(d - 0.2) - 0.02;\r\nhighp float all = min(min(a, b), c);\r\n\r\ncolor = vec3(smoothstep(0.01, 0.0, all));"
    },
    {
      "filename": "dot.json",
      "name": "Dot",
      "tags": "",
      "description": "Permet d'obtenir l'alignement entre deux vecteurs.",
      "previewShader": "highp float d = distance(uv.xy, vec2(0.5));\r\nhighp float a = abs(d - 0.25) - 0.1;\r\n\r\nhighp vec2 dir = normalize(uv.xy - vec2(0.5));\r\nhighp float angle = time * 5.0;\r\nhighp vec2 targetDir = vec2(sin(angle), cos(angle));\r\nhighp float align = dot(dir, targetDir) * 0.5 + 0.5;\r\n\r\ncolor = vec3(smoothstep(0.01, 0.0, a) * align);"
    },
    {
      "filename": "floor.json",
      "name": "Floor",
      "tags": "round stairs",
      "description": "Arrondis à l’entier ≤ à votre valeur.",
      "previewShader": "color = vec3(step(uv.y * 5.0 + time,  floor(uv.x * 5.0 + time)));"
    },
    {
      "filename": "frac.json",
      "name": "Frac",
      "tags": "repeat cycle",
      "description": "Régulièrement utilisé pour réaliser des opérations cycliques, répéter une paterne.",
      "previewShader": "color = vec3(step(uv.y,  fract(uv.x + time)));"
    },
    {
      "filename": "inverselerp.json",
      "name": "InverseLerp",
      "tags": "",
      "description": "Converti une valeur dans un certain range vers une valeur entre 0 et 1.",
      "previewShader": ""
    },
    {
      "filename": "length.json",
      "name": "length",
      "tags": "",
      "description": "Permet d'obtenir la longueur d'un vecteur.",
      "previewShader": "highp float a = length(uv.xy - vec2(0.5)) - (0.35 + (sin(time * 3.0) * 0.5 + 0.5) * 0.1);\r\ncolor = vec3(smoothstep(0.01, 0.0, a));"
    },
    {
      "filename": "lerp.json",
      "name": "Lerp",
      "tags": "",
      "description": "Permet s’interpoler entre deux valeurs sur base d’ une valeur entre 0 et 1.",
      "previewShader": "highp float t = sin(time) * 0.5 + 0.5;\r\nhighp vec2 coords = vec2(mix(0.25, 0.75, t)); \r\nhighp float circleDF = distance(uv, coords) - 0.2;\r\nhighp vec2 square = abs(uv - coords) - vec2(0.2);\r\nhighp float squareDF = max(square.x, square.y);\r\nhighp float shape = step(mix(circleDF, squareDF, t), 0.0);\r\ncolor = vec3(shape);\r\n//color = vec3(circleDF, squareDF, t);"
    },
    {
      "filename": "negate.json",
      "name": "Negate",
      "tags": "",
      "description": "Retourne la négative de votre valeur, à ne pas confondre avec le one-minus.",
      "previewShader": "highp float minusShape = max(abs(uv.x - 0.27) - 0.1, abs(uv.y - 0.5) - 0.05);\r\n\r\nhighp float angle = 3.1415 * 0.25;\r\nhighp vec2 rotUv = uv - vec2(0.65, 0.5);\r\nrotUv = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * rotUv;\r\n\r\nhighp float crossA = max(abs(rotUv.x) - 0.25, abs(rotUv.y) - 0.05);\r\nhighp float crossB = max(abs(rotUv.x) - 0.05, abs(rotUv.y) - 0.25);\r\n\r\nhighp float shape = min(min(minusShape, crossA), crossB);\r\n\r\ncolor = vec3(step(shape , 0.0));"
    },
    {
      "filename": "oneminus.json",
      "name": "OneMinus",
      "tags": "",
      "description": "Retourne l’inverse de la valeur entrée. <i>(Dans un contexte de valeurs entre 0-1)</i>",
      "previewShader": "highp vec2 b = vec2(0.5 + sin(time) * 0.15, 0.5);\r\nhighp float c = smoothstep(0.01, 0.0, distance(uv.xy, b) - 0.3);\r\nif (uv.x < 0.5)\r\n\tcolor = vec3(c);\r\nelse\r\n\tcolor = vec3(1.0 - c);"
    },
    {
      "filename": "power.json",
      "name": "Power",
      "tags": "curve gamma",
      "description": "",
      "previewShader": "highp float a = pow(uv.x, 0.1 + (sin(time) + 1.0) * 4.0);\r\ncolor = vec3(smoothstep(0.01, 0.0, uv.y - a));"
    },
    {
      "filename": "sine.json",
      "name": "Sin",
      "tags": "trigonometry circle",
      "description": "Parfait pour faire des oscillations douces.\r\nPermet aussi de convertir un angle en direction.",
      "previewShader": "color = vec3(step(uv.y, sin(uv.x * 3.1415 + time) * 0.5 + 0.5));"
    },
    {
      "filename": "smoothstep.json",
      "name": "Smoothstep",
      "tags": "scruve",
      "description": "Permet de facilement réaliser une sCurve entre deux valeurs.",
      "previewShader": "color = vec3(step(uv.y, smoothstep(0.0, 1.0, uv.x)));"
    },
    {
      "filename": "step.json",
      "name": "Step",
      "tags": "branch if",
      "description": "Souvent utilisé comme forme d’embranchement à la place d’un “if”.",
      "previewShader": "color = vec3(step(uv.y, uv.x));"
    }
  ]
}