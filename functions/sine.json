{
  "name": "Sin",
  "tags": "trigonometry circle wave",
  "description": "Le sinus est très pratique pour créer une oscillation douce.",
  "previewShader": "",
  "examples": [
    {
      "name": "Frequency",
      "description": "Dans cet exemple, nous pouvons faire varier la fréquence de notre sinus.",
      "shader": "color = vec3(step(uv.y, sin(uv.x * frequency + offset) * 0.5 + 0.5));",
      "code": "float result = step(uv.y, sin(uv.x * frequency + offset));",
      "properties": [
        {
          "name": "Frequency",
          "id": "frequency",
          "type": "range",
          "value": "3,1415",
          "min": "0",
          "max": "20"
        },
        {
          "name": "Offset",
          "id": "offset",
          "type": "range",
          "value": "0",
          "min": "0",
          "max": "10"
        }
      ]
    },
    {
      "name": "Amplitude",
      "description": "Dans cet exemple, nous pouvons faire varier l'amplitude de notre sinus.",
      "shader": "color = vec3(step(uv.y, sin(uv.x * 3.1415 + time) * amplitude * 0.5 + 0.5));",
      "code": "float result = step(uv.y, sin(uv.x * 3.1415 + time) * amplitude);",
      "properties": [
        {
          "name": "Amplitude",
          "id": "amplitude",
          "type": "range",
          "value": "0,5",
          "min": "0",
          "max": "2"
        }
      ]
    },
    {
      "name": "Speed",
      "description": "Dans cet exemple, nous pouvons faire varier la vitesse de notre sinus.",
      "shader": "color = vec3(step(uv.y, sin(uv.x * 3.1415 + time * speed) * 0.5 + 0.5));",
      "code": "float result = step(uv.y, sin(uv.x * 3.1415 + time * speed));",
      "properties": [
        {
          "name": "Speed",
          "id": "speed",
          "type": "range",
          "value": "3,1415",
          "min": "0",
          "max": "20"
        }
      ]
    },
    {
      "name": "Blink",
      "description": "Dans cet exemple, le sinus est entièrement basé sur le temps plutôt que l'axe X.",
      "shader": "highp float a = sin(time * speed) * 0.5 + 0.5; color = vec3(compareY > 0.5 ? step(uv.y, a) : a);",
      "code": "//Sans comparaison à l'axe Y\nfloat result = sin(time * speed) * 0.5 + 0.5;\n\n//Avec comparaison à l'axe y\nfloat result = step(uv.y, sin(time * speed) * 0.5 + 0.5);",
      "properties": [
        {
          "name": "Compare to Y Axis",
          "id": "compareY",
          "type": "toggle",
          "value": "False",
          "min": "",
          "max": ""
        },
        {
          "name": "Speed",
          "id": "speed",
          "type": "range",
          "value": "3,1415",
          "min": "0",
          "max": "20"
        }
      ]
    }
  ]
}